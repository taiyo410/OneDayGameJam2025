#pragma once
#include <chrono>
#include <memory>
#include <DxLib.h>


class Fader;
class SceneBase;
class Camera;

class SceneManager
{

public:

	// シーン管理用
	enum class SCENE_ID
	{
		NONE,
		TITLE,	//タイトル
		SELECT,
		GAME,	//ゲーム
		RESULT,	//リザルト
	};


	// インスタンスの生成
	static void CreateInstance(void);

	// インスタンスの取得
	static SceneManager& GetInstance(void);

	void Init(void);
	void Init3D(void);
	void Update(void);
	void Draw(void);
	void Destroy(void);

	// シーン遷移命令
	void ChangeScene(SCENE_ID nextId);

	// シーンIDの取得
	SCENE_ID GetSceneID(void);

	// デルタタイムの取得
	float GetDeltaTime(void) const;

	// カメラの取得
	//std::weak_ptr<Camera> GetCamera(void) const;
	//スクリーンの取得
	const int& GetMainScreen(void);

private:

	// 静的インスタンス
	static SceneManager* instance_;

	SCENE_ID sceneId_;
	SCENE_ID waitSceneId_;
	
	//描画スクリーン
	int mainScreen_;
	int capturedScreenGraph_ = -1; // 複製した画像のハンドル

	// フェード
	std::unique_ptr<Fader> fader_;

	// 各種シーン
	std::unique_ptr<SceneBase> scene_;

	// カメラ
	//std::shared_ptr<Camera> camera_;

	// シーン遷移中判定
	bool isSceneChanging_;

	// デルタタイム
	std::chrono::system_clock::time_point preTime_;
	float deltaTime_;

	// ゲームの総時間
	float totalGameTime_;

	// コンストラクタ
	SceneManager(void);

	// デストラクタ
	~SceneManager(void);

	// シーン遷移
	void DoChangeScene(SCENE_ID sceneId);

	// フェード処理
	void Fade(void);

};